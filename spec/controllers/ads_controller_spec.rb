require 'rails_helper'
require 'include_module_spec'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe AdsController, type: :controller do
  login_user
  # This should return the minimal set of attributes required to create a valid
  # Ad. As you add validations to Ad, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryGirl.build(:ad) }

  let(:ad) { FactoryGirl.create(:ad)}

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # AdsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all ads as @ads" do
      ad
      get :index, params: {}, session: valid_session
      expect(assigns(:ads)).to eq([ad])
    end
  end

  describe "GET #show" do
    it "assigns the requested ad as @ad" do
      ad
      get :show, params: {id: ad.to_param}, session: valid_session
      expect(assigns(:ad)).to eq(ad)
    end

    it "increases the @ads.visits" do
      get :show, params: {id: ad.to_param}, session: valid_session
      ad.reload
      expect(ad.visits).to eq(2)
    end

    it "increases the @campaign.visits" do
      get :show, params: {id: ad.to_param}, session: valid_session
      ad.reload
      expect(ad.run.campaign.givenvisits).to eq(2)
    end

    it "changes the visitsratio" do
      get :show, params: {id: ad.to_param}, session: valid_session
      ad.reload
      expect(ad.run.campaign.givenvisits).to eq(2)
      expect(ad.run.campaign.visitratio).to eq(2)
    end

  end

  describe "GET #new" do
    it "assigns a new ad as @ad" do
      get :new, params: {}, session: valid_session
      expect(assigns(:ad)).to be_a_new(Ad)
    end
  end

  describe "GET #edit" do
    it "assigns the requested ad as @ad" do
      ad
      get :edit, params: {id: ad.to_param}, session: valid_session
      expect(assigns(:ad)).to eq(ad)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Ad" do
        expect {
          post :create, params: {ad: build_attributes(:ad)}, session: valid_session
        }.to change(Ad, :count).by(1)
      end

      it "assigns a newly created ad as @ad" do
        post :create, params: {ad: build_attributes(:ad)}, session: valid_session
        expect(assigns(:ad)).to be_a(Ad)
        expect(assigns(:ad)).to be_persisted
      end

      it "redirects to the created ad" do
        post :create, params: {ad: build_attributes(:ad)}, session: valid_session
        expect(response).to redirect_to(Ad.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved ad as @ad" do
        post :create, params: {ad: build_attributes(:invalidad)}, session: valid_session
        expect(assigns(:ad)).to be_a_new(Ad)
      end

      it "re-renders the 'new' template" do
        post :create, params: {ad: build_attributes(:invalidad)}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        build_attributes(:ad)
      }

      it "updates the requested ad" do
        ad
        put :update, params: {id: ad.to_param, ad: new_attributes}, session: valid_session
        ad.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested ad as @ad" do
        ad
        put :update, params: {id: ad.to_param, ad: build_attributes(:ad)}, session: valid_session
        expect(assigns(:ad)).to eq(ad)
      end

      it "redirects to the ad" do
        ad
        put :update, params: {id: ad.to_param, ad: build_attributes(:ad)}, session: valid_session
        expect(response).to redirect_to(ad)
      end
    end

    context "with invalid params" do
      it "assigns the ad as @ad" do
        ad
        put :update, params: {id: ad.to_param, ad: build_attributes(:invalidad)}, session: valid_session
        expect(assigns(:ad)).to eq(ad)
      end

      it "re-renders the 'edit' template" do
        ad
        put :update, params: {id: ad.to_param, ad: build_attributes(:invalidad)}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested ad" do
      ad
      expect {
        delete :destroy, params: {id: ad.to_param}, session: valid_session
      }.to change(Ad, :count).by(-1)
    end

    it "redirects to the ads list" do
      ad
      delete :destroy, params: {id: ad.to_param}, session: valid_session
      expect(response).to redirect_to(ads_url)
    end
  end

end
